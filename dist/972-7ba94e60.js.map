{"version":3,"file":"972-7ba94e60.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/ui/src/button/Button.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormFieldType.ts","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/loading/LoadingSpinner.tsx","webpack://checkout/./packages/ui/src/loading/LoadingOverlay.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne((selectedItemId) => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\n                <ul className={className}>{children}</ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = (id) => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li\n            className={classNames(className, { [classNameSelected]: isSelected })}\n        >\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children && (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            )}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n","import classNames from 'classnames';\nimport React, { ButtonHTMLAttributes, FunctionComponent } from 'react';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    isFullWidth?: boolean;\n    isLoading?: boolean;\n    size?: ButtonSize;\n    testId?: string;\n    variant?: ButtonVariant;\n}\n\nexport enum ButtonVariant {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Action = 'action',\n}\n\nexport enum ButtonSize {\n    Small = 'small',\n    Tiny = 'tiny',\n    Large = 'large',\n}\n\nfunction getClassName(\n    props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>,\n) {\n    const { className, isFullWidth, isLoading, size, variant } = props;\n\n    return classNames(\n        'button',\n        className,\n        { 'button--primary': variant === ButtonVariant.Primary },\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\n        { 'button--action': variant === ButtonVariant.Action },\n        { 'button--small': size === ButtonSize.Small },\n        { 'button--tiny': size === ButtonSize.Tiny },\n        { 'button--large': size === ButtonSize.Large },\n        { 'button--slab': isFullWidth },\n        {\n            'optimizedCheckout-buttonPrimary':\n                variant === ButtonVariant.Primary || variant === ButtonVariant.Action,\n        },\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\n        { 'is-loading': isLoading },\n    );\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({\n    children,\n    className,\n    disabled,\n    isFullWidth,\n    isLoading,\n    size,\n    testId,\n    type,\n    variant,\n    ...rest\n}) => (\n    <button\n        {...rest}\n        className={getClassName({ className, isFullWidth, isLoading, size, variant })}\n        data-test={testId}\n        disabled={disabled || isLoading}\n        type={type || 'button'}\n    >\n        {children}\n    </button>\n);\n\nexport default Button;\n","import { Field, FieldConfig, FieldProps, getIn } from 'formik';\nimport { isDate, noop } from 'lodash';\nimport React, {\n    Component,\n    createElement,\n    FunctionComponent,\n    memo,\n    useCallback,\n    useMemo,\n} from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\n\nexport interface BasicFormFieldProps extends FieldConfig {\n    additionalClassName?: string;\n    className?: string;\n    testId?: string;\n    onChange?(value: any): void;\n}\n\ntype InnerFieldInputProps = FieldProps &\n    Pick<FieldConfig, 'component' | 'render'> & {\n        onChange?(value: string): void;\n    };\n\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\n\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            field: { value },\n            onChange = noop,\n        } = this.props;\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparableValue = isDate(value) ? value.getTime() : value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparablePrevValue = isDate(prevField.value)\n            ? prevField.value.getTime()\n            : prevField.value;\n\n        if (comparableValue !== comparablePrevValue) {\n            onChange(value);\n        }\n    }\n\n    render() {\n        const { component = 'input', field, render } = this.props;\n\n        if (render) {\n            return render(this.props);\n        }\n\n        if (typeof component === 'string') {\n            return createElement(component, field);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        return createElement(component as any, this.props);\n    }\n}\n\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\n        const input = useMemo(\n            () => (\n                <InnerFieldInput\n                    component={component}\n                    field={field}\n                    form={form}\n                    onChange={onChange}\n                    render={render}\n                />\n            ),\n            [field, form, onChange, component, render],\n        );\n\n        return (\n            <FormFieldContainer\n                additionalClassName={additionalClassName}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                hasError={getIn(form.errors, field.name)}\n                testId={testId}\n            >\n                {input}\n            </FormFieldContainer>\n        );\n    },\n    (\n        { form: prevForm, field: prevField, ...prevProps },\n        { form: nextForm, field: nextField, ...nextProps },\n    ) =>\n        shallowEqual(prevProps, nextProps) &&\n        shallowEqual(prevForm, nextForm) &&\n        shallowEqual(prevField, nextField),\n);\n\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\n    additionalClassName,\n    className,\n    component,\n    render,\n    testId,\n    onChange,\n    ...rest\n}) => {\n    const renderInnerField = useCallback(\n        (props: FieldProps) => (\n            <InnerField\n                {...props}\n                additionalClassName={additionalClassName}\n                className={className}\n                component={component}\n                onChange={onChange}\n                render={render}\n                testId={testId}\n            />\n        ),\n        [additionalClassName, className, component, render, testId, onChange],\n    );\n\n    return <Field {...rest} render={renderInnerField} />;\n};\n\nexport default memo(BasicFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\nimport { Label } from '../Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"checkbox\"\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","/* istanbul ignore file */\n\nimport React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className=\"multiCheckbox--controls\">\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","/* istanbul ignore file */\n\nimport { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\nimport { FormFieldError } from '../FormFieldError';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.CHECKBOX}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField } from '../FormField';\nimport { Label } from '../Label';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n        inputDateFormat,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(\n        () => (\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        ),\n        [fieldInputId, fieldLabel, required, label],\n    );\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.NUMBER;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.TELEPHONE;\n            }\n\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, name, secret]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                inputDateFormat={inputDateFormat}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options && options.rows}\n            />\n        ),\n        [\n            inputDateFormat,\n            fieldInputId,\n            autocomplete,\n            dynamicFormFieldType,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n        ],\n    );\n\n    return (\n        <div className={`dynamic-form-field ${extraClass || ''}`}>\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","enum DynamicFormFieldType {\n    TELEPHONE = 'tel',\n    DROPDOWM = 'dropdown',\n    NUMBER = 'number',\n    PASSWORD = 'password',\n    CHECKBOX = 'checkbox',\n    MULTILINE = 'multiline',\n    DATE = 'date',\n    RADIO = 'radio',\n    TEXT = 'text',\n}\n\nexport default DynamicFormFieldType;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    // <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n    //     <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    // </svg>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"11\" viewBox=\"0 0 11 11\" fill=\"none\">\n        <g clipPath=\"url(#clip0_104_591)\">\n            <g clipPath=\"url(#clip1_104_591)\">\n                <g clipPath=\"url(#clip2_104_591)\">\n                    <path d=\"M0.359985 3.28003H10.36L5.35999 8.28003\" fill=\"#919191\" />\n                </g>\n            </g>\n        </g>\n        <defs>\n            <clipPath id=\"clip0_104_591\">\n                <rect width=\"10\" height=\"10\" fill=\"white\" transform=\"translate(0.359985 0.280029)\" />\n            </clipPath>\n            <clipPath id=\"clip1_104_591\">\n                <rect width=\"10\" height=\"10\" fill=\"white\" transform=\"translate(0.359985 0.280029)\" />\n            </clipPath>\n            <clipPath id=\"clip2_104_591\">\n                <rect width=\"10\" height=\"10\" fill=\"white\" transform=\"translate(0.359985 0.280029)\" />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from '../Input/Input';\nimport Label from '../Label/Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => (\n        <textarea\n            {...rest}\n            className={\n                className ||\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\n            }\n            data-test={testId}\n            ref={ref}\n        />\n    ),\n);\n\nexport default TextArea;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isDate, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate } from '@bigcommerce/checkout/locale';\n\nimport { IconChevronDown } from '../../icon';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { InputProps } from '../Input';\nimport { RadioInput } from '../RadioInput';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n    isFloatingLabelEnabled?: boolean;\n    inputDateFormat?: string;\n    date?: {\n        inputFormat: string;\n    };\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    isFloatingLabelEnabled,\n    date,\n    inputDateFormat,\n    ...rest\n}) => {\n    const inputFormat = inputDateFormat || date?.inputFormat || '';\n\n    const handleDateChange = useCallback(\n        (dateValue: string, event) =>\n            onChange({\n                ...event,\n                target: {\n                    name,\n                    value: dateValue,\n                },\n            }),\n        [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.DROPDOWM:\n            return (\n                <>\n                    <div\n                        className={classNames(\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\n                        )}\n                    >\n                        <IconChevronDown />\n                    </div>\n                    <select\n                        {...(rest as any)}\n                        className={classNames(\n                            { 'floating-select': isFloatingLabelEnabled },\n                            'form-select optimizedCheckout-form-select',\n                        )}\n                        data-test={`${id}-select`}\n                        id={id}\n                        name={name}\n                        onChange={onChange}\n                        value={value ?? ''}\n                    >\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\n                        {options &&\n                            options.map(({ label, value: optionValue }) => (\n                                <option key={optionValue} value={optionValue}>\n                                    {label}\n                                </option>\n                            ))}\n                    </select>\n                </>\n            );\n\n        case DynamicFormFieldType.RADIO:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.CHECKBOX:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.DATE:\n            return (\n                <ReactDatePicker\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    autoComplete=\"off\"\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                    // onChangeRaw={ rest.onChange }\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\n                    className=\"form-input optimizedCheckout-form-input\"\n                    dateFormat={inputFormat}\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                    name={name}\n                    onChange={handleDateChange}\n                    placeholderText={inputFormat.toUpperCase()}\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\n                    selected={isDate(value) ? value : undefined}\n                />\n            );\n\n        case DynamicFormFieldType.MULTILINE:\n            return (\n                <TextArea\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\n                    }`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import classNames from 'classnames';\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { FormFieldError } from '../FormFieldError';\nimport { Label } from '../Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    id?: string;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        (props: FieldProps<string>) => (\n            <>\n                {Boolean(label) && (typeof label === 'function' ? label(name) : label)}\n\n                {Boolean(labelContent && !label) && (\n                    <Label htmlFor={name} id={`${id ?? name}-label`}>\n                        {labelContent}\n                    </Label>\n                )}\n\n                {input(props)}\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n\n                {footer}\n            </>\n        ),\n        [label, labelContent, id, input, name, footer],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(FormField);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldContainerProps {\n    additionalClassName?: string;\n    children: ReactNode;\n    className?: string;\n    hasError?: boolean;\n    testId?: string;\n}\n\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\n    additionalClassName,\n    children,\n    className,\n    hasError,\n    testId,\n}) => (\n    <FormContext.Consumer>\n        {({ isSubmitted }) => (\n            <div\n                className={\n                    className ||\n                    classNames('form-field', additionalClassName, {\n                        'form-field--error': hasError && isSubmitted,\n                    })\n                }\n                data-test={testId}\n            >\n                {children}\n            </div>\n        )}\n    </FormContext.Consumer>\n);\n\nexport default memo(FormFieldContainer);\n","import { ErrorMessage } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldErrorProps {\n    name: string;\n    testId?: string;\n    errorId: string;\n}\n\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\n    const renderMessage = useCallback(\n        (message: string) => (\n            <ul className=\"form-field-errors\" data-test={testId}>\n                <li className=\"form-field-error\">\n                    <label\n                        aria-live=\"polite\"\n                        className=\"form-inlineMessage\"\n                        htmlFor={name}\n                        id={errorId}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </label>\n                </li>\n            </ul>\n        ),\n        [errorId, name, testId],\n    );\n\n    return (\n        <FormContext.Consumer>\n            {({ isSubmitted }) =>\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\n            }\n        </FormContext.Consumer>\n    );\n};\n\nexport default memo(FormFieldError);\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    testId?: string;\n}\n\nconst Input = forwardRef(({ testId, ...rest }: InputProps, ref: Ref<HTMLInputElement>) => (\n    <input {...rest} data-test={testId} ref={ref} />\n));\n\nexport default Input;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\n\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n    testId?: string;\n    hidden?: boolean;\n}\n\nconst Label: FunctionComponent<LabelProps> = ({ children, className, hidden, testId, ...rest }) => (\n    <label\n        {...rest}\n        className={classNames(\n            className || 'form-label',\n            { 'is-srOnly': hidden },\n            'optimizedCheckout-form-label',\n        )}\n        data-test={testId}\n    >\n        {children}\n    </label>\n);\n\nexport default Label;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n}\n\nconst TextInput = forwardRef(\n    (\n        { additionalClassName, appearFocused, type = 'text', ...rest }: TextInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <Input\n            {...rest}\n            className={classNames(\n                'form-input',\n                'optimizedCheckout-form-input',\n                { 'form-input--focus': appearFocused },\n                { 'optimizedCheckout-form-input--focus': appearFocused },\n                additionalClassName,\n            )}\n            ref={ref}\n            type={type}\n        />\n    ),\n);\n\nexport default TextInput;\n","import React, { FunctionComponent, memo } from 'react';\n\nexport interface LoadingSpinnerProps {\n    isLoading: boolean;\n}\n\nconst LoadingSpinner: FunctionComponent<LoadingSpinnerProps> = ({ isLoading }) => {\n    if (!isLoading) {\n        return null;\n    }\n\n    return (\n        <div\n            aria-busy=\"true\"\n            className=\"loadingSpinner loadingOverlay-container\"\n            role=\"status\"\n            style={{ height: 100 }}\n        >\n            <div className=\"loadingOverlay optimizedCheckout-overlay\" />\n        </div>\n    );\n};\n\nexport default memo(LoadingSpinner);\n","import React, { FunctionComponent } from 'react';\n\nimport LoadingSpinner from './LoadingSpinner';\n\nexport interface LoadingOverlayProps {\n    isLoading: boolean;\n    hideContentWhenLoading?: boolean;\n    unmountContentWhenLoading?: boolean;\n}\n\nconst LoadingOverlay: FunctionComponent<LoadingOverlayProps> = ({\n    children,\n    hideContentWhenLoading,\n    unmountContentWhenLoading,\n    isLoading,\n}) => {\n    if (hideContentWhenLoading || unmountContentWhenLoading) {\n        return (\n            <>\n                <LoadingSpinner isLoading={isLoading} />\n                {unmountContentWhenLoading && isLoading ? null : (\n                    <div\n                        style={{\n                            display: hideContentWhenLoading && isLoading ? 'none' : undefined,\n                        }}\n                    >\n                        {children}\n                    </div>\n                )}\n            </>\n        );\n    }\n\n    return (\n        <div className=\"loadingOverlay-container\">\n            {children}\n            {isLoading && (\n                <div\n                    className=\"loadingOverlay optimizedCheckout-overlay\"\n                    data-test=\"loading-overlay\"\n                />\n            )}\n        </div>\n    );\n};\n\nexport default LoadingOverlay;\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","createContext","onToggle","noop","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","getRootElement","addEventListener","removeEventListener","componentWillUnmount","document","this","render","children","placement","dropdown","ref","className","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","Component","getContextValue","memoizeOne","selectedItemId","handleToggleItem","id","isDisabled","onSelect","defaultSelectedItemId","AccordionContext","value","ChecklistContext","undefined","setFieldValue","handleSelect","useCallback","contextValue","useMemo","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","useContext","isSelected","transitionEndListener","node","done","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","type","Label","htmlFor","content","htmlId","kebabCase","label","rest","Checklist","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID","ButtonVariant","ButtonSize","getClassName","isFullWidth","isLoading","size","variant","Primary","Secondary","Action","Small","Tiny","Large","testId","componentDidUpdate","prevField","isDate","getTime","component","createElement","InnerField","additionalClassName","form","input","InnerFieldInput","hasError","getIn","errors","prevForm","nextForm","nextField","renderInnerField","Field","forwardRef","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","MultiCheckboxFormField","values","options","push","remove","handleSelectAll","checkedValues","difference","map","forEach","val","handleSelectNone","handleInputChange","target","indexOf","FormFieldContainer","length","DynamicInput","fieldType","DynamicFormFieldType","FormFieldError","errorId","renderField","renderProps","pick","FieldArray","secret","fieldLabel","required","max","min","maxLength","inputDateFormat","parentFieldName","placeholder","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","includes","autoComplete","items","helperLabel","rows","FormField","xmlns","height","viewBox","fill","clipPath","d","transform","withDate","isFloatingLabelEnabled","date","inputFormat","handleDateChange","dateValue","optionValue","key","CheckboxInput","Array","isArray","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","TextInput","legend","labelContent","footer","Boolean","isSubmitted","renderMessage","message","role","ErrorMessage","hidden","appearFocused","hideContentWhenLoading","unmountContentWhenLoading","display"],"sourceRoot":""}