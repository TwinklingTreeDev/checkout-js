{"version":3,"file":"cart-summary-0ec2673f.js","mappings":"kOA+BA,SAAe,OAAa,IAA5B,EAVqE,SAAC,GAAE,IAAAA,EAAO,UAAKC,GAAK,cAAnB,aAC5DC,GAAa,SAAiB,KAAO,gBAAC,IAAQ,CAACC,IAAKH,IAE1D,OAAO,OAAe,UAAf,EAA6B,gCAC7BC,GAAK,CACRD,QAAO,EACPE,WAAU,IAElB,G,2GChBA,QAT8C,SAAC,G,IAAEE,EAAQ,WAAO,OAC5D,0BAAQC,UAAU,eACd,sBAAIA,UAAU,iDACV,gBAACC,EAAA,EAAgB,CAACC,GAAG,uBAExBH,EALuD,E,sECuGhE,QA/EwF,SAAC,GACrF,IAAAI,EAAa,gBACbC,EAAK,QACLC,EAAa,gBACbC,EAAe,kBACfT,EAAU,aACVU,EAAmB,sBACnBC,EAAS,YACTC,EAAK,QACFC,GAA0B,cATwD,oHAW/E,GAA2C,EAAAC,EAAA,KAAzCC,EAAgB,mBAAEC,EAAkB,qBACtCC,EAA+CC,QACjDF,KACID,EAAiBI,gBAAgB,2BAEnCC,GAAsB,IAAAC,UAAQ,WAAM,SAAAC,EAAA,GAAmBX,EAAnB,GAA+B,CAACA,IACpEY,EAAsBjB,GAAiBC,GAASA,EAAMiB,OAAS,EAerE,OAbA,IAAAC,YAAU,WACN,GAAIR,EAMA,OALKF,EAAiBW,gBAClBC,EAAA,uBAA6C,0BAI1C,WACHZ,EAAiBa,gBAAgB,yBACrC,CAER,GAAG,CAACb,EAAkBE,IAGlB,2BAASd,UAAU,sCAAqC,YAAW,QAC/D,gBAAC,EAAkB,KAAEH,GAErB,gBAAC6B,EAAA,EAAmB,KAChB,gBAACC,EAAA,EAAiB,CAACC,uBAAqB,EAACC,MAAOZ,KAGnDH,GACG,uBAAKZ,GAAIsB,EAAA,yBAGb,gBAACE,EAAA,EAAmB,KAChB,gBAACI,EAAA,GAAqB,eAAC3B,cAAeA,EAAeC,MAAOA,GAAWM,KAG3E,gBAACgB,EAAA,EAAmB,KAChB,gBAACK,EAAA,EAAiB,CACdC,YAAavB,EACbwB,oBAAqB3B,EAAgB4B,KACrCC,kBAAmB9B,EAAc6B,OAEpC3B,GAGJa,GAAuB,gBAACM,EAAA,EAAmB,KACxC,sBACI1B,UAAU,uEAAsE,YACtE,YAEV,gBAACC,EAAA,EAAgB,CACbC,GAAG,0BAGTE,GAAS,IAAIgC,KAAI,SAACC,EAAKC,GAAU,OAC/B,gBAACC,EAAA,EAAiB,CACdC,OAAQH,EAAIG,OACZC,IAAKH,EACLI,MAAOL,EAAIM,KACXC,OAAO,cALoB,KAWnD,C","sources":["webpack://checkout/./packages/core/src/app/cart/CartSummary.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryHeader.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummary.tsx"],"sourcesContent":["import { Checkout, ShopperCurrency, StoreCurrency } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { withCheckout } from '../checkout';\nimport { isBuyNowCart } from '../common/utility';\nimport OrderSummary from '../order/OrderSummary';\n\nimport EditLink from './EditLink';\nimport mapToCartSummaryProps from './mapToCartSummaryProps';\nimport { RedeemableProps } from './Redeemable';\nimport withRedeemable from './withRedeemable';\n\nexport type WithCheckoutCartSummaryProps = {\n    checkout: Checkout;\n    cartUrl: string;\n    isUpdatedCartSummayModal: boolean;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrency;\n    storeCreditAmount?: number;\n} & RedeemableProps;\n\nconst CartSummary: FunctionComponent<WithCheckoutCartSummaryProps> = ({ cartUrl, ...props }) => {\n    const headerLink = isBuyNowCart() ? null : <EditLink url={cartUrl} />;\n\n    return withRedeemable(OrderSummary)({\n        ...props,\n        cartUrl,\n        headerLink,\n    });\n};\n\nexport default withCheckout(mapToCartSummaryProps)(CartSummary);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst OrderSummaryHeader: FunctionComponent = ({ children }) => (\n    <header className=\"cart-header\">\n        <h3 className=\"cart-title optimizedCheckout-headingSecondary\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </h3>\n        {children}\n    </header>\n);\n\nexport default OrderSummaryHeader;\n","import {\n    ExtensionRegion,\n    LineItemMap,\n    ShopperCurrency,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode, useEffect, useMemo } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport OrderSummaryHeader from './OrderSummaryHeader';\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\nimport removeBundledItems from './removeBundledItems';\n\nexport interface OrderSummaryProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrency;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummary: FunctionComponent<OrderSummaryProps & OrderSummarySubtotalsProps> = ({\n    isTaxIncluded,\n    taxes,\n    storeCurrency,\n    shopperCurrency,\n    headerLink,\n    additionalLineItems,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isSummaryLastItemAfterExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.SummaryLastItemAfter),\n    );\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n\n    useEffect(() => {\n        if (isSummaryLastItemAfterExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.SummaryLastItemAfter,\n                ExtensionRegion.SummaryLastItemAfter,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.SummaryLastItemAfter);\n            };\n        }\n    }, [extensionService, isSummaryLastItemAfterExtensionRegionEnabled]);\n\n    return (\n        <article className=\"cart optimizedCheckout-orderSummary\" data-test=\"cart\">\n            <OrderSummaryHeader>{headerLink}</OrderSummaryHeader>\n\n            <OrderSummarySection>\n                <OrderSummaryItems displayLineItemsCount items={nonBundledLineItems} />\n            </OrderSummarySection>\n\n            {isSummaryLastItemAfterExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.SummaryLastItemAfter} />\n            )}\n\n            <OrderSummarySection>\n                <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n            </OrderSummarySection>\n\n            <OrderSummarySection>\n                <OrderSummaryTotal\n                    orderAmount={total}\n                    shopperCurrencyCode={shopperCurrency.code}\n                    storeCurrencyCode={storeCurrency.code}\n                />\n                {additionalLineItems}\n            </OrderSummarySection>\n\n            {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n        </article>\n    );\n};\n\nexport default OrderSummary;\n"],"names":["cartUrl","props","headerLink","url","children","className","TranslatedString","id","isTaxIncluded","taxes","storeCurrency","shopperCurrency","additionalLineItems","lineItems","total","orderSummarySubtotalsProps","useExtensions","extensionService","isExtensionEnabled","isSummaryLastItemAfterExtensionRegionEnabled","Boolean","isRegionEnabled","nonBundledLineItems","useMemo","removeBundledItems","displayInclusiveTax","length","useEffect","renderExtension","ExtensionRegionContainer","removeListeners","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","items","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","map","tax","index","OrderSummaryPrice","amount","key","label","name","testId"],"sourceRoot":""}